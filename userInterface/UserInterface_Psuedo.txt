CLASS: userInterfaceClass

CLASS FIELDS: 
    
    shipStorage (shipStorage object)

COSTRUCTORS:

Defualt:
    IMPORT: none
    EXPORT: none
    ASSERTION: creaetes a shipStorage object 

    AGORITHM:

        create a new shipStorage object 

METHODS 

SUBMODULE: inputIntMenu
    IMPORT: mssg (String)
    EXPORT: userOp (Integer)
    PURPOSE: to allow the user to select one of the options listed in the menu
             using an integer.

    ALGORITHM:
        (Boolean) isValid := FALSE
        DO
            TRY
                OUTPUT: mssg 
                INPUT: userSel
                isValid := TRUE 
            CATCH InputMismatchException 
                OUTPUT: "Please input an integer" 

                COMMENT: I am inputing nothing to clear the buffer of the
                         probalmatic problem, and to avoid the catch loop 
                         running an infinite loop.
                INPUT: none (Integer)
            END TRY CATCH
        WHILE (equal to not isValid)        

SUBMODULE: inputCharMenu
    IMPRORT: mssg (String) 
    EXPORT: userOP (Character)
    PURPOSE: to allow the user to select one of the options listed in the menu 
             using a single character. 

    ALGORITHM:
        (Boolean) isValid := FALSE
        DO
            TRY
                OUTPUT: mssg
                INPUT: userSel         
                isValid := TRUE 
            CATCH InputMismatchException
                OUTPUT "Please enter a single character"
            
                COMMENT: I am inputing nothing yo clear the buffer f the probalmatic
                         problem. and to avoid the catch loop running an infinte
                         loop
                INPUT: none (Integer)
            END TRY CATCH 
        WHILE (equal to not isValid) 
            
SUBMODULE: createMenus
    IMPORT: none
    EXPORT: none
    ASSERTIONS: creates menu's with the parameters set by the programmer.
              

    ALGORITHM:

       
        COMMENT: this is the main menu where the user is first exposed to the
                 overall functionality of the programme

        battleShipMenus[0] := menuClassInteger.setMssg        COMMENT: note to self, try to figure out how to have these in one 
                 statement. Maybe do this when you create the actual objects

        battleShipMenus[0] := menuClassInteget.setOptions(7)
        
        COMMENT: the menu the user is exposed to when they select 1 from the
                 main menu

        battleShipMenus[1] := menuClassInteger.setMssg("1. add manually
                                                      2. add from a file ")
        battleShipMenus[1] := menuClassInteger.setOptions(2)

        COMMENT: the menu the user is exposed to when they select 2 from the 
                 main menu 

        battleShipMenus[2] := menuClassInteger.setMssg        battleShipMenus[2] := menuClassInteger.setOptions(3)
    
        COMMENT: the menu the user is exposed to when they select 3 on the menu

        battleShipMenus[3] := menuClassInterger.setMssg        battleShipMenus[3] := menuClassInteger.setOptions(3)

SUBMODULE: getUserSerialNum
    IMPORT: none
    EXPORT: serialNum
    PURPOSE: to ask the serial number from the user, and to validate their 
             input

    ALGORITHM

        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the serial number of the ship:"
                INPUT: serialNum (String)
                
                COMMENT: you can use either the submarine or fighterjet classes
                         to validate the serial number as they're excatly the
                         same
    
                IF (validateSerialNum <- serialNum) THEN
                    isValid := TRUE
                END IF 

            CATCH InputMismatchException 
                OUTPUT: "ERROR: please input a valid serial numbe" 
                +error message
                isValid := FALSE
        WHILE ((is not equal to isValid)

SUBMODULE: getUserShipType
    IMPORT: none 
    EXPORT: shipType 
    PURPOSE: to get the ship type from the user and validate it 
    
    ALGORITHM:
        (Boolean) isValid 
        DO
            TRY       
                isValid := TRUE
                OUTPUT: "Press the followng to enter ship type:
                         S - Submarine
                         F- - Fighter Jet "
                INPUT: shipType (character)
            CATCH InputMismatchException
                OUTPUT "ERROR: please input a single character 
                        +complier message
                isValid := FALSE 
            END TRY CATCH
        WHILE ((shipType doesn't equal to 'f' or 'F' or 'S' or 's') AND (
                not equal to isValid)

SUBMODULE: getUserCylinders
    IMPORT: none
    EXPORT: cylinders (integer) 
    PURPOSE: to get the cylinders from the user and to validate it

    ALGORITHM:
        (Boolean) isValid
        DO 
            TRY
                OUTPUT: "Number of cylinders of the ships: "
                INPUT: cylnders (integer)

                COMMENT: You can use either the submarine or fighterejet class
                         to validate the number of cylinders 

                IF (validateCylinders <- cylinders) THEN
                    isValid := TRUE
                END IF 

            CATCH InputMismatchException
                OUTPUT: "ERROR: please input an interger" +complier message
                isValid := FALSE 
            END TRY CATCH
        WHILE (not equal to isValid)

SUBMODULES: getUserHull
    IMPORT: none
    EXPORT: hull (String) 
    PURPOSE: to get the cylinders from the user and validate it
    
    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Enter hull of the ship: "
                INPUT: hull (Stirng)

                IF (ValidateHull <- hull) THEN
                    isValid := TRUE
                END IF

            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a string" +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE(not equal to isValid)

SUBMODULES: getUserMaxDepth
    IMPORT: none
    EXPORT: depth (Real)
    PURPOSE: to get the max depth from the user and validate it

    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the max depth of the ship"
                INPUT: depth (real)

                IF (validateMaxDepth <- depth) THEN
                    isValid := TRUE 
                END IF
    
            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a real number: "  
                        +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE(not equal to isValid) 

SUBMODULES: getUserWingSpan
    IMPORT: none 
    EXPORT: wingSpan (Real)
    PURPOSE: to get the max wingspan from the user and validate it 

    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the wingspan of the ship"
                INPUT: wingSpan (Real)
                
                IF (validateWingSpan <- wingSpan) THEN 
                    isValid := TRUE
                END IF
            
            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a real number: " +complier message
                isValid := FALSE 
            END TRY CATCH 
        WHILE (not equal to isValid)

SUBMODULES: getUserOrdance
    IMPORT: none
    EXPORT: ordance
    PURPOSE: to get the ordance from the user and validate  it

    ALGORITHM: 
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the ordance of the ship: "
                INPUT: ordance (String)

                IF (validateOrdance <- ordance) THEN
                    isValid := TRUE
                END IF

            CATCH InputMismatchException
                OUTPUT: "ERROR:"  +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE (not equal to isValid)

SUBMODULE: addUserShips
    IMPORT: none 
    EXPORT: none
    PURPOSE: to allow the user to add ships manually to the programme, and the
             appopriate eror handling and validation. 

    ALGORITHM:
        
        shipType := getUserShipType <- none      
        serialNum := getUserSerialNum <- none
        year := getUserYear <- none
        cylinders := getUserCylinders <- none 

        CASE shipType
            'S':'s"
                hull := getUserHull <- none
                maxDepth := getUserMaxDepth <- none
                FileManger.createShipObjcts <- shipType, year, cylinders, fuel
                                                hull, maxDepth
            'F':'f'
                wingSpan := getUserWingSpan <- none
                ordance := getUserOrdance <- none 
                FileManger.createUserObjcts <- shipType, year, cylinders, fuel
                                                wingSpan, ordance
        END CASE 

SUBMODULE: addShipsFile
    IMPORT:
    NONE:
    PURPOSE:

    ALGORITHM: 
        OUTPUT: "Please enter file name to read ships from"
        INPUT: fileName (String)
        FileManger.readFile <- fileName

OTHER METHODS

SUBMODULE: mainMenu
    IMPORT: none
    EXPORT: none
    PURPOSE: to control the structure of the main menu and to invoke the 
             appropriate methods

    ALGORITHM:
        
        DO
            userOp := inputIntMenu <- (" 1. Add Ships
                                         2. View Ships
                                         3. find duplicates
                                         4. destination Check
                                         5. Load ships
                                         6. Save Ships
                                         7. Exit")
    
            IF (userOP doesn't equal to 1 or 2 or 3 or 4 or 5 or 6 or 7) THEN
                OUTPUT: "Please enter an option which is in the menu below: "
            END IF 

        WHILE userOP doesn't equal to 1 or 2 or 3 or 4 or 5 or 6 or 7

        CASE userOP
            1:
                addShips <- none
            2: 
                viewShips <- none
            3: 
                findDuplicates <- none 
            4:
                destinationCheck <- none
            5:
                loadShips <- none
            6: 
                saveShips <- exit
            7:
                OUTPUT: "Goodbye friend"
            DEFUALT: OUTPUT: "Invalid option" 
        END CASE       

SUBMODULE: addShipsMenu
    IMPORT: none
    EXPORT: none
    PURPOSE: to invoke the appropriate methods to add ships to the programme

    ALGORITHM:
        
        DO
            (Integer) userOp := inputIntMenu <- ("1. View all ships
                                                  2. View submarines only
                                                  3. View fighter jets 
                                                    only ")
            IF (userOp doesn't equal to 1 or 2 or 3) THEN
                OUTPUT: "Please enter an option which is in the menu below: "
            END IF 
        WHILE (userOp doesn't equal 1 or 2 or 3)


        CASE userOp
            1:
                addUserShips <- none
            2:
                addShipFile <- none
            DEFUALT:
                OUTPUT: "Invalid option"

SUBMODULE: duplicatesMenu 
    IMPORT: none
    EXPROT: none
    PURPOSE

    ALGORITHM:
        DO 
            (Integer) userOp := inputIntMenu <- ("1. Find all duplicates
                                                  2. Find submarine 
                                                     duplicates only
                                                  3. Find fighter Jet
                                                     duplicates only")
            IF (userOp doesn't equal to 1 or 2 or 3) THEN
                OUTPUT: "please input what is in the menu below: "
            END IF
        WHILE (userOp doesn't equal to 1 or 2 or 3 ) 

        case userOp
            1:
                FOR ((integer) ii TO
                

                
            

