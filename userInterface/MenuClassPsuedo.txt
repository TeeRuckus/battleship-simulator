CLASS: menuClassInteger

CALSS FIELDS:

    mssg (String)
    options (interger)
    parameters [] (Integer)

CONSTRUCTORS

Defualt:
    IMPORT: none
    EXPORT: none
    ASSERTION: a defualt string message with 3 options and 3 parameters is a 
               valid menu constructor

    ALGORITHM:
        
        mssg := "Please select one of the following options to do something
                    1. go to section one of the programme
                    2. go to section two of the programme
                    3. go to section three of the programme "
        options := 3
        
        COMMENT: I trying to create something which will hold the options in the
                 menu mssg, so it later can be used to check the users input
                 against the menu options. This method is based on an assumption
                 that the menu is not going to have 0 as a parameter.
        
        parameters [] := SIZE of options
        
        parameters := generateElements <- none

Alternate
    IMPORT: (menuClassInterger object) inMenu
    EXPORT: none
    ASSERTIONS: creates a menu object if the imports of the menu are valid 

    ALGORITHM:

        IF (validateMenu <- inMenu) THEN
            menu := inMenu
        END IF

Copy:
    IMPORT: inMenu (menuClassInterger object)
    EXPORT: none
    ASSERTIONS: creates an object which is identical to the inMenu object

    ALGORITHM:
        mssg := inMenu.getMssg
        options := inMenu.getOptions
    
        COMMENT: there's no point of copying the elements when you can 
                 re-generate the elements, and it's easier to do it that way
        parameters[] := SIZE of options
        parameters := generateElements <- options

ACCESORS

SUMBODULE: getMssg
    IMPORT: none
    EXPORT: mssg(String)

SUBMODULE: getOptions
    IMPORT: none
    EXPORT: options 

MUTATORS:

SUBMODULE: setMssg
    IMPORT: inMssg (String) 
    EXPORT: none
    ASSERTION: set mssg to inMssg if it is not null

    ALGORITHM:
        IF (inMssg is not null) THEN
            mssg := inMssg
        END IF

SUBMODULE: setOptions
    IMPROT: inOptions (integer)
    EXPORT: none
    ASSERTION: set options if it's not less than 0 

    ALGORITHM:
        IF (inOptions > 0)
            options := inOptions
        END IF

DOING SUBMODULES

SUMODULE: selOpMenu
    IMPORT: mssg (String)
    EXPORT: userOp (Integer)
    PURPOSE: to grab the users option out of the given selections of the 
             programme.

    ALGORITHM:
        (interger) userOP := 0
        DO
            TRY
                OUTPUT: mssg
                OUTPUT: >>>
                INPUT: userOp
            CATCH: InputMismatchException
                OUTPUT: "ERROR: get error message from complier
                userOp := 0
            END TRY CATCH
        WHILE userOP is equal to 0 and not equal to parameters*********

PRIVATE SUBMODULES

SUBMODULE: validateMenu
    IMPORT: inObjct
    EXPORT: isValid (boolean)
    ASSERTIONS: validates if the menu object is valid

    ALGORITHM:  
        isValid := FALSE
        
        IF (mssg LENGTH doesn't equal 0) THEN
            isValid := TRUE
        END IF 

SUMBODULE: generateElements
    IMPORT: options (Interger)
    EXPORT: none
    ASSERTIONS: if the printed options are equal to the variable options, except
                printed out incrementally.
    ALGORITHM:
        (integer) num := 1 

        FOR ((interger)ii=0 TO LENGTH of options -1 CHNAGEBY 1) THEN
            parameters[ii] := num
            num := num + 1
        END FOR

OTHER METHODS

SUBMODULE: clone
    IMPORT: none
    EXPORT: cloneMenuClassInteger
    ASSERTION: returns a clones object of the current object 

    ALGORITHM:
        CONSTRUCT cloneMenuclassInteger USING ALTERNATE CONSTRUCTOR with
            -mssg
            -options
            -parameters

SUBMODULE: equals
