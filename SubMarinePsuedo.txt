CLASS: SubMarine

    PUBLIC CLASS CONSTANTS:
        STEEL (strings) := "STEEL"
        ALLY (strings) := "ALLOY"
        TTNM (strings):= "TITANIUM"
        MAX_DEPTH (Real) := 0.0
        MIN_DEPTH (Real) := -500.0


    CLASS FIELDS:
        hull (string)
        maxDepth (Real)

    COSTRUCTORS:

    Defualt:
        IMPORT: none
        EXPORT: none
        ASSERTION: a sumbmarine which inherits its defualt constructor with a 
                   maxDepth of -500 and a hull of titanium is a valid defualt
                   state

        ALGORITHM:
            super default constructor
            hull := TTNM
            maxDepth := -500.0

    Alternate
        IMPORT: inSerialNum (Real), inYear (Interger), inHull (String),
                inMaxDepth (Real)
        EXPORT: none
        ASSERTIONS: creates an object if the imports are valid, otherwise it 
                    will FAIL

        ALGORITHM:
            super <- inSerialNum, inYear, inEngine
            IF (validateHull <- inHull) THEN
                IF (validateMaxDepth <- inMaxDepth) THEN
                    hull := inHull < make a copy
                    maxDepth := inMaxDepth
                END IF
            END IF 

    Copy:
        IMPORT: inSubMarine (SubMarineClass)
        EXPORT: none
        ASSERTION: creates an object which is identical to the alternate
                   constructor

        ALGORITHM:
            super <- inSubMarine
            hull := inSubMarine.getHull <- none
            maxDepth := inSubMarine.getMaxDepth <- none

    ACCESSORS

    SUBMODULE: get getHull
        IMPORT: none
        EXPORT: hull
        ASSERTION: returns a copy of the last set hull

    SUBMODULE: getMaxDepth
        IMPORT: none
        EXPORT: maxDepth
        ASSERTION: returns the last set max depth

    MUTATORS:

    SUBMODULE: setHull
        IMPORT: inHull (String)
        EXPORT: none
        ASSERTION: set hull to to inHull if it's valid, otherwise it will fail

        ALGORITHM:

            IF (validateHull <- inHull) THEN
                hull := inHull <- make a copy
            END IF 

    SUBMODULE: setMaxDepth
        IMPORT: inMaxDepth (Real)
        EXPORT: none
        ASSERTION: set max depth to inMaxDepth if it's valid, otherwise

        ALGORITHM:
            IF (validateMaxDepth <- inMaxdepth) THEN
                maxDepth :=  inMaxDepth
            END IF

    DOING METHODS

    SUBMODULE: calcTravelTime
        IMPORT: inShip SubMarine object), distance (integer)
        EXPORT: timeHours (Real)
        PURPOSE: is to calculate the travel time of submarine in hours

        ALGORITHM:
            IF(distance >= 0) THEN
                COMMENT: splitting up the calculations in the assignemnt specification to
                make it more comphredable and to make it easier to type cast values 
                and debug 
                (Real) ratio := (Real) distance / (double) getEngine <- none. 
                                                            getCylinders <- none
                (Real) denom := 10.00 + getMaxDepth <- none * -1.00
                (Real) invDenom = 1.00/ denom

                (Real) result := ratio * invDenom
            ELSE
                FAIL("ERROR: negative distance")
            END IF ELSE
                
     PRIVATE SUBMODULES:

        SUBMODULE: validateHull
            IMPORT: inHull (String)
            EXPORT: isValid (boolean)
            ASSERTION: it will only validate inHull if it's one of the following
                       three; steel, alloy and titanium.

            ALGORITHM:
                
                COMMENT: converting inHull to be upper case, to allow any 
                         casing for fuel to be passed to the method as reuired 
                         in the specification 

                isValid := FALSE

                (String) upperCaseInHull := inHull <- convert to a lower case
                IF (upperCaseInHull equals to STEEL or ALY or TTNM) THEN
                    isValid := TRUE
                ELSE
                    FAIL("Invalid hull")
                END IF ELSE

        SUBMODULE: validateMaxDepth
            IMPORT: inMaxDepth (Real)
            EXPORT: isValid (Boolean)
            ASSERTION: a maxdepth of between -500 - 0 will be validate 
                       otherwise, an error will be thrown to the user

            ALGORITHM:
                isValid := FALSE

                IF (MAX_DEPTH <= inMaxDepth <= MIN_DEPTH) THEN
                    isValid := TRUE
                ELSE
                    FAIL("Invalid max depth")
                END IF ELSE

    OTHER METHODS:

    SUBMODULE: clone
        IMPORT: none
        EXPORT: cloneSubMarine (Object)
        ASSERTION: returns a cloned object of the current object

        ALGORITHM:
            construct cloneSubMarine using this

    SUBMODULE: equals
        IMPORT: inObjct (object)
        EXPORT: isSame (boolean)
        ASSERTION: two submarines are equal if they have the same hull, and
                    max depth

        ALGORITHM:
            isEqual := FALSE
            IF (inObj ISA SubMarine) THEN

                COMMENT: we need to type cast inObjct to a submarine class because 
                the object data type is not sepcific enough, and it won't be 
                suitable for boolean operations

                inSubmarine  := (Convert to SubMarine)inObjct
                
                IF(isSame(hull, inSubMarine.getHull <- none) THEN
                    IF(isSame(maxDepth, inSubMarine.getMaxDepth <- none))
                        isEqual := TRUE
                    END IF
                END IF
            END IF


    SUBMODULE: toString
        IMPORT: none
        EXPORT: str
        PURPOSE: to display submarines classfields in a readable format format 
                 for the user

        ALGORITHM:

           str := super.toString <- none + getEngine <- none.toString <- none+
                  " It is a submarine with a " +hull" " hull and a max depth "
                  "of" +maxDepth+ "."

    SUBMODULE: toFileString
        IMPORT: none
        EXPORT: str
        PURPOSE: It's to return a string which will be written to a file, to allow
                 another class to create ship objects from the written string

        ALGOTITHM:
            str := "S," +  super.toFileString <- none + ", " + 
                   +getEngine <- none.toFileString <- none + "," + hull + ","
                   +maxDepth
