CLASS: UI 

CLASS FIELDS: 
    
    storageUnit (shipStorage object)

COSTRUCTORS:

Defualt:
    IMPORT: none
    EXPORT: none
    ASSERTION: creaetes a shipStorage object 

    AGORITHM:

        create a new shipStorage object as storageUnit

METHODS 

SUBMODULE: inputIntMenu
    IMPORT: mssg (String)
    EXPORT: userOp (Integer)
    PURPOSE: to allow the user to select one of the options listed in the menu
             using an integer.

    ALGORITHM:
        (Integer) userOp := 0
        (Boolean) isValid := FALSE
        DO
            TRY
                OUTPUT: mssg 
                INPUT: userOp
                isValid := TRUE 
            CATCH InputMismatchException 
                OUTPUT: "Please input an integer" 

                COMMENT: I am inputing nothing to clear the buffer of the
                         probalmatic problem, and to avoid the catch loop 
                         running an infinite loop.
                INPUT: none (Integer)
            END TRY CATCH
        WHILE (equal to not isValid)        

SUBMODULE: inputCharMenu
    IMPRORT: mssg (String) 
    EXPORT: userOP (Character)
    PURPOSE: to allow the user to select one of the options listed in the menu 
             using a single character. 

    ALGORITHM:
        (Boolean) isValid := FALSE
        DO
            TRY
                OUTPUT: mssg
                INPUT: userOp         
                isValid := TRUE 
            CATCH InputMismatchException
                OUTPUT "Please enter a single character"
            
                COMMENT: I am inputing nothing yo clear the buffer f the probalmatic
                         problem. and to avoid the catch loop running an infinte
                         loop
                INPUT: none (Integer)
            END TRY CATCH 
        WHILE (equal to not isValid) 
            
SUBMODULE: getUserSerialNum
    IMPORT: none
    EXPORT: serialNum
    PURPOSE: to ask the serial number from the user, and to validate their 
             input

    ALGORITHM
        
        serialNum := 000.000
        (Boolean) isValid := FALSE
        DO
            TRY
                OUTPUT: "Please enter the serial number of the ship:"
                INPUT: serialNum (String)
                
                COMMENT: you can use either the submarine or fighterjet classes
                         to validate the serial number as they're excatly the
                         same
    
                IF (validateSerialNum <- serialNum) THEN
                    isValid := TRUE
                END IF 

            CATCH InputMismatchException 
                OUTPUT: "ERROR: please input a valid serial numbe" 
                +error message
                isValid := FALSE
        WHILE ((is not equal to isValid)

SUBMODULE: getUserShipType
    IMPORT: none 
    EXPORT: shipType (Character)
    PURPOSE: to get the ship type from the user and validate it 
    
    ALGORITHM:
        (Boolean) isValid := FALSE
        DO
            TRY       
                isValid := TRUE
                inputCharMenu <-  "Press the followng to enter ship type:
                         S - Submarine
                         F- - Fighter Jet "
            CATCH InputMismatchException
                OUTPUT "ERROR: please input a single character 
                        +complier message
                isValid := FALSE 
            END TRY CATCH
        WHILE ((shipType doesn't equal to 'f' or 'F' or 'S' or 's') AND (
                not equal to isValid)

SUBMODULE: getUserCylinders
    IMPORT: none
    EXPORT: cylinders (integer) 
    PURPOSE: to get the cylinders from the user and to validate it

    ALGORITHM:
        (Boolean) isValid
        DO 
            TRY
                OUTPUT: "Number of cylinders of the ships: "
                INPUT: cylnders (integer)

                COMMENT: You can use either the submarine or fighterejet class
                         to validate the number of cylinders 

                IF (validateCylinders <- cylinders) THEN
                    isValid := TRUE
                END IF 

            CATCH InputMismatchException
                OUTPUT: "ERROR: please input an interger" +complier message
                isValid := FALSE 
            END TRY CATCH
        WHILE (not equal to isValid)

SUBMODULES: getUserHull
    IMPORT: none
    EXPORT: hull (String) 
    PURPOSE: to get the cylinders from the user and validate it
    
    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Enter hull of the ship: "
                INPUT: hull (Stirng)

                IF (ValidateHull <- hull) THEN
                    isValid := TRUE
                END IF

            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a string" +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE(not equal to isValid)

SUBMODULES: getUserMaxDepth
    IMPORT: none
    EXPORT: depth (Real)
    PURPOSE: to get the max depth from the user and validate it

    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the max depth of the ship"
                INPUT: depth (real)

                IF (validateMaxDepth <- depth) THEN
                    isValid := TRUE 
                END IF
    
            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a real number: "  
                        +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE(not equal to isValid) 

SUBMODULES: getUserWingSpan
    IMPORT: none 
    EXPORT: wingSpan (Real)
    PURPOSE: to get the max wingspan from the user and validate it 

    ALGORITHM:
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the wingspan of the ship"
                INPUT: wingSpan (Real)
                
                IF (validateWingSpan <- wingSpan) THEN 
                    isValid := TRUE
                END IF
            
            CATCH InputMismatchException
                OUTPUT: "ERROR: please input a real number: " +complier message
                isValid := FALSE 
            END TRY CATCH 
        WHILE (not equal to isValid)

SUBMODULES: getUserOrdance
    IMPORT: none
    EXPORT: ordance
    PURPOSE: to get the ordance from the user and validate  it

    ALGORITHM: 
        (Boolean) isValid
        DO
            TRY
                OUTPUT: "Please enter the ordance of the ship: "
                INPUT: ordance (String)

                IF (validateOrdance <- ordance) THEN
                    isValid := TRUE
                END IF

            CATCH InputMismatchException
                OUTPUT: "ERROR:"  +complier message
                isValid := FALSE
            END TRY CATCH
        WHILE (not equal to isValid)

SUBMODULE: addUserShips
    IMPORT: none 
    EXPORT: none
    PURPOSE: to allow the user to add ships manually to the programme, and the
             appopriate eror handling and validation. 

    ALGORITHM:
        
        shipType := getUserShipType <- none      
        serialNum := getUserSerialNum <- none
        year := getUserYear <- none
        cylinders := getUserCylinders <- none 

        CASE shipType
            'S':'s'
                hull := getUserHull <- none
                maxDepth := getUserMaxDepth <- none
                FileManger.createShipObjcts <- shipType, year, cylinders, fuel
                                                hull, maxDepth
            'F':'f'
                wingSpan := getUserWingSpan <- none
                ordance := getUserOrdance <- none 
                FileManger.createUserObjcts <- shipType, year, cylinders, fuel
                                                wingSpan, ordance
        END CASE 

SUBMODULE: addShipsFile
    IMPORT:
    NONE:
    PURPOSE:

    ALGORITHM: 
        OUTPUT: "Please enter file name to read ships from"
        FileManger.readFile <- fileName, shipStorage

OTHER METHODS

SUBMODULE: mainMenu
    IMPORT: none
    EXPORT: none
    PURPOSE: to control the structure of the main menu and to invoke the 
             appropriate methods

    ALGORITHM:
        
        DO
            userOp := inputIntMenu <- (" 1. Add Ships
                                         2. View Ships
                                         3. find duplicates
                                         4. destination Check
                                         5. Load ships
                                         6. Save Ships
                                         7. Exit")
    
            IF (userOP doesn't equal to 1 or 2 or 3 or 4 or 5 or 6 or 7) THEN
                OUTPUT: "Please enter an option which is in the menu below: "
            END IF 

        WHILE userOP doesn't equal 7

        CASE userOP
            1:
                addShipsMenu <- none
            2: 
                viewShipsMenu <- none
            3: 
                findDuplicatesMenu <- none 
            4:
                destinationCheck <- none
            5:
                loadShips <- none
            6: 
                saveShips <- none
            7:
                OUTPUT: "Goodbye friend"
            DEFUALT: OUTPUT: "Invalid option" 
        END CASE       

SUBMODULE: addShipsMenu
    IMPORT: none
    EXPORT: none
    PURPOSE: to invoke the appropriate methods to add ships to the programme

    ALGORITHM:
        
        DO
            (Integer) userOp := inputIntMenu <- ("1. Add ships manually
                                                  2. Add ships from file"

            IF (userOp doesn't equal to 1 or 2) THEN
                OUTPUT: "Please enter an option which is in the menu below: "
            END IF 
        WHILE (userOp doesn't equal 1 or 2)

        CASE userOp
            1:
                addUserShips <- none
            2:
                addShipFile <- none
            DEFUALT:
                OUTPUT: "Invalid option"

SUBMODULE: viewShips
    IMPORT: none
    EXPORT: none
    PURPOSE: to display all the storeShips strings to the user

    ALGORITHM:
        String[] ShipStrs = SIZE of shipStrage <- MAX_CAP

        TRY
            shipStrs := shipStorage <- toStringStrr <- none
            FOR(integer ii := 0 TO shipStorage <- getCount <- none CHNAGEBY 1)
               THEN 
               OUTPUT: shipStrsa
            END FOR
        CATCH(NegativeArraySizeException)
            OUTPUT: "ERROR: nothing has beenadded to the system: "
                    getMessage <- none

SUBMPODULE: viewSubs
    IMPORT: none
    EXPORT: none
    PURPOSE:

    ALGORITHM:

        FOR ((Integer)ii TO shipStorage.MAXCAP (exclusive) CHANGEBY 1) THEN 
            OUTPUT: shipStorage.toStringSubArr[ii]
        END FOR


SUBMODULE: displaySubDuplicates:
    IMPORT: none
    EXPORT: none
    PURPOSE: to display all the duplicates found to the user 

    ALGORITHM:
        Ship[] duplicates := SIZE OF shipStorage <- MAX_CAP
        TRY
            duplicates = shipStorage <- findDuplicate <-  none
            OUTPUT: "the following ships have duplicates "
            DO
                OUTPUT: duplicates[ii]
            WHILE duplicates[ii] doesn't equal to null
        CATCH (NegativeArraySizeExceptions)
            OUTPUT: "ERROR: nothing has been added to the system yet: <- get
                    error message
        END TRY CATCH

SUBMODULE: destinationCheck
    IMPORT: none
    EXPORT: none
    PURPOSE:

    ALGORITHM:
        
        distance := inputDoubleMenu <-"Enter a distance to calculate the "+
                                   "fastest ship which can tranverse that "+
                                   "distance:")
        TRY 
            distanceRound (Real) := round  up distance
            distanceRoundInt := (integer) distanceRound
            fastestShip := shipStorage <- destinationCheck <- distanceRoundInt
            OUTPUT "The fastest ship " +fastestShip
        CATCH(NullPointerException)
            OUTPUT: "ERROR: nothing has been added to the system" +get error
                    message
        END TRY CATCH

SUBMODULE: loadShips
    IMPORT: none
    EXPORT: none
    PURPOSE:

    ALGORITHM:
        
        fileName (Stin) :=inpuutStringMenu <- "Please input a fileName to load 
                                             ships: "
        FileManger.readFile(fileName, shipStorage)

SUBMODULE: saveShips
    IMPORT: fileName (String)
    EXPORT: none

    ALGORITHM:
        String[] savedShips := SIZE OF shipStorage <- MAX_CAP
        TRY
            savedShips := shipStorage <- toFileString <- none
            fileName (string) := inputStringMenu <- "Please input a file name 
                                                    to save ships: "
            DO
                FileManger <- writeFile <- fileName, savedShips[ii]
                ii := ii+1
            WHILE savedShips[ii] doesn't equal null AND ii < shipStorage <-
                  getCount <- none
        CATCH(NegativeArraySizeException)
            OUTPUT: "ERROR: nothing has been added to the system yet: " +get
                    error message

SUBMODULE: showError
    IMPORT: error (String)
    EXPORT: none
    ASSERTION: returns the error message of the specific methods been called

    ALGORITHM
        OUTPUT: error

    the rest of the code is copied and pasted from  other classes and I am not
    copying the psuedo here
