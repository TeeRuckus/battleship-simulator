CLASS: ShipStorage

PUBLIC CLASS CONSTANTS:


    (Integer) MAX_CAP := 30

CLASS FIELDS:

    (Integer) countShips
    (Ship) storeShips[]
    (Ship) ship

COSTRUCTORS:

Defualt:
    IMPORT: none
    EXPORT: none
    ASSERTION: count varibales of zero and empty arrays of the maximum capacity
                variables is valid defualt sate.

    ALGORITHM:
        countShips := 0
        storeShips[] := SIZE of MAX_CAP

    ACCESSORS

    SUBMODDULE: getCount
        IMPORT: none
        EXPORT: the current value of the count varaiable

    DOING METHODS

SUBMODULE: addShip
    IMPORT: inSub (SubMarine object) 
    EXPORT: none
    ASSERTION: a sub will be added to storeShips if the inSub is valid, and
                storeShips hasn't exceeded the MAX_CAP

    ALGORITHM:

        IF (validateSub <- inSub) THEN
                storeShips[countShips] := inSub  <- make a copy                    

                COMMENT: I am incrementing countSub by 1, to go to the next
                         vaccant index of the storeSub

                countShips := countShips + 1
        END IF

SUBMODULE: addShip
    IMPORT: inJet (jetFighter object) 
    EXPORT: none
    ASSERTION: a jet will be added to storeJets if the inJet is valid, and
               storeShips hasn't exceeded MAX_CAP

    ALGORITHM:
        IF (validateJet <- inJet) THEN
                storeJets[countJets] := inJet

                COMMENT: I am incemention countJets by 1, to go to the next
                         vaccant index of the storeJets

                countJets := countJets + 1
        END IF 



SUBMODULE: getShip
    IMPORT: none
    EXOPORT: ship (Ship)
    PURPOSE: get the last ship stored in storeShips

    ALGORITHM:

        COMMENT: I have subtracted one because the other constructors (i.e.
                 alternate constructor) will move the index  of the count
                 variable to the next available index, hence you have to
                 subtract one to get the last stored submarine

        sub := storeSub[countShips - 1]

SUBMODULE: destinationCheck
    IMPORT: (integer) distance
    EXPORTS: (String) str
    PURPOSE:
    
    ALGORITHM: 

    fastestShip (Ship) := none

    FOR((integer) ii := 0 TO countShips (exclusice) CHANGEBY 1) THEN
        FOR(((integer) jj = ii + 1 TO couuntShips (exclusive) CHANGEBY 1) THEN
            IF(storeShips[ii] <- calcTravelTime <- distance < 
                            storeShips[jj] <- calcTravelTime <- distance
                fastestShip := storeShips[ii]
            END IF
        END FOR
    END FOR 
   
   str := fastestShip <- toString <- none 

SUBMODULE: findDuplicateShips
    IMPORTS: none
    EXPORT: dupilicates[] (Object)
    PURPOSE: finds the duplicates in storeSubs and displays the ship

    ALGORITHM:
        


        (object) duplicates [] := SIZE of MAX_CAP * 2
        
        found (integer) := 0

        FOR ((integer) ii := 0 TO countShips (exclusive) CHANGEBY 1) THEN

            COMMENT: I am starting the looping variable at one because 1 don't
                     want the programme to store itself as a dupilcate, hence
                     it will search for objects after itself

            FOR((integer) jj := ii+1 TO countShips (exclusive) CHANGEBY 1) THEN
                IF (storeShips[ii].equals(storeShips[jj])) THEN
                    duplicate[found] := storeShips[ii]
                END IF
            END FOR
        END FOR

PRIVATE SUBMODULES:

SUBMODULE: validateShip
    IMPORT: inObjct (SubMarine object)
    EXPORT: isValid (Boolean)
    ASSERTION: if inObjct is a SubMarine object then it's  valid

    ALGORITHM:

        isValid := FALSE
        IF (inObjct ISA SubMarine object) THEN
            IF (validateShipsFields <- inObjct) THEN 
                IF (validateShipCap <- none) THEN
                    isValid := TRUE
                END IF
            END IF 
        END IF

SUBMODULE: validateShip
    IMPORT: inObjct (fighterJet object)
    EXPORT: isValid (Boolean)
    ASSERTION: if inJet is a fighterJet object then it's valid

    ALGORITHM:

        isValid := FALSE
        IF (inObjct ISA FighterJet object) THEN
            IF (validateShipsFields <- inObjct) THEN 
                IF (validateShipCap <- none) THEN
                    isValid := TRUE
                END IF
            END IF 
        END IF

SUBMODULE: validateShipFields 
    IMPORT: inObjct (Object)
    EXPORT: isValid (Boolean)
    ASSERTION: if an objects class fields are not null, it's a valid object

    ALGORITHM:

        isValid (Boolean) := FALSE
        IF(inObject is not null) THEN
            isValid := TRUE
        ELSE
            FAIL("ERROR: classfields are empty:)
        END IF ELSE 

SUBMODULE: validateShipCap
    IMPORT: none
    EXPORT: isValid (Boolean)
    ASSERTION: checks if the MAX CAP of the shipstorage has been reached
    
    isValid (Boolean) := FALSE
    IF(countShips < MAX_CAP)
        isValid := TRUE
    ELSE
        FAIL("ERROR: shipstorage maxium capacity reached")
    END IF ELSE

OTHER METHODS:


SUBMODULE: equalsArray
    IMPORT: arrayOne (Object), arrayTwo (object Two)
    EXPORT: isSame (boolean)
    ASSERTION: if two array objects are the same class type and length, and have
               the same objects in the array and it's valid

    ALGORITHM:

        COMMENT: this algorithm was adapted from worksheet 9 of OOPD

        IF (length of arrayOne is EQUAL to length of arrayTwo) THEN
            isValid :=   TRUE

            COMMENT: searching through both arrays to ensure that they have
                     the same contents in the array

            (Integer) compareElements := 0

            DO
                isSame := arrayOne[compareElements].equals
                                                   (arrayTwo[compareElements])
                compareElements := compareElements + 1
            WHILE compareElements < LENGTH of arrayOne
        END IF

SUBMODULE: equals
    IMPORT: inObjct (Object) 
    EXPORT: isEqual (boolean)
    PURPOSE: to check the equality of two shipStorages

SUBMODULE: toStringSubArr
    IMPORT: none
    EXPORT: str [] (address of str in memory of the data type string)
    ASSERTION:

    ALGORITHM:

            str [] := SIZE of MAX_CAP

            FOR ((Integer) ii := 0 TO MAX_CAP (exclusive) CHNAGEBY 1) THEN
                st[ii] := storeShips[ii].toString
            END FOR

SUBMODULE: toStringJetArr
    IMPORT: none
    EXPORT: str [] (address of str in memory of the data type string)
    ASSERTION:

    ALGORITHM:

        str [] := SIZE of MAX_CAP

       FOR ((Integer) ii = 0 TO MAX_CAP (exclusive) CHANGEBY 1) THEN
            str [ii] := storeShips[ii].toString
        END FOR

SUBMODULE: toStringArr
    IMPORT: none
    EXPORT: strarr [] (String)
    PURPOSE:

    ALGORITHM:

        String strArr [] := ARRAY SIZE OF countShips

        FOR(Iinteger ii := 0 TO countSgips CHANGEBY 1
            strArr[ii] := storeShips[ii] <- toString
        END FOR

SUBMODULE: toFileStringArr
    IMPORT: none
    EXPORT: strArry [] (String)
    PURPOSE: to create an array of storeShips toFileString method

    ALGORITHM:

         String strArr [] := ARRAY SIZE OF countShips

        FOR(Iinteger ii := 0 TO countSgips CHANGEBY 1
            strArr[ii] := storeShips[ii] <- toFileString
        END FOR


        
