CLASS: ShipStorage

PUBLIC CLASS CONSTANTS:

    COMMENT: I have made two maxiumum capcity to make refactoring and
             expandibility of the code easier in the future, and to allow the
             user to have a non 1:1 split of the capacity between submarines and
             jets.

    (Integer) MAX_CAP := 15

CLASS FIELDS:

    (Integer) countSubs
    (Integer) countJets
    (SubMarine object) storeSubs []
    (fighterJet object) storeJets []

COSTRUCTORS:

Defualt:
    IMPORT: none
    EXPORT: none
    ASSERTION: count varibales of zero and empty arrays of the maximum capacity
                variables is valid defualt sate.

    ALGORITHM:
        countSubs := 0
        countJets := 0
        storeSubs[] := SIZE of MAX_CAP
        storeJets[] := SIZE of MAX_CAP

SUBMODULE: addShipSubmarine 
    IMPORT: inSub (SubMarine object) , countSubs (Integer)
    EXPORT: none
    ASSERTION: a sub will be added to storeSubs if the inSub is valid, and
                storeSubs hasn't exceeded the MAX_CAP

    ALGORITHM:

        IF (validateSub <- inSub) THEN
                storeSubs[countSubs] := inSub                      

                COMMENT: I am incrementing countSub by 1, to go to the next
                         vaccant index of the storeSub

                countSubs := countSubs + 1
        END IF

SUBMODULE: addShipFighterJet
    IMPORT: inJet (jetFighter object) , countJets (integer)
    EXPORT: none
    ASSERTION: a jet will be added to storeJEts if the inJet is valid, and
               storeSubs hasn't exceeded MAX_CAP

    ALGORITHM:
        IF (validateJet <- inJet) THEN
                storeJets[countJets] := inJet

                COMMENT: I am incemention countJets by 1, to go to the next
                         vaccant index of the storeJets

                countJets := countJets + 1
        END IF 


COMMENT: I don't think you need getSub or getJet

SUBMODULE: getSub (SubMarine object)
    IMPORT: none
    EXOPORT: sub (SubMarine Object)
    PURPOSE: gets the last stored submarine in the storeSub array

    ALGORITHM:

        COMMENT: I have subtracted one because the other constructors (i.e.
                 alternate constructor) will move the index  of the count
                 variable to the next available index, hence you have to
                 subtract one to get the last stored submarine

        sub := storeSub[countSubs - 1]

SUBMODULE: getjet (fighterJetClass Object)
    IMPORT: none
    EXPORT: jet (fighterJet object)
    PURPOSE: gets the last store jet in the storeJer array

    ALGORITHM

        COMMENT: I have subtracted one because the other constructors (i.e.
                 alternate constructor) will move the index of the count
                 variable to the next available index, hence you have to
                 subtract one to get the last stored jet

        jet := storeJet[countJets - 1]

SUBMODULE: destinationCheckSub
    IMPORT: (integer) distance
    EXPORTS: (String) str 
    PURPOSE:

    ALGORITHM:
        
        COMMENT: I am setting up a submarine object to set up a reference point
                 of comparison to other submarine objects withing the storeSubs
                 array. The 0 index sub is the most convient

        (Real) fastestSubTime := calcTravelTimeSub <- (storeSubs[0],
                                                                distance)
        
        COMMENT: I don't want the reference submarine of comparison, to comparew
                 by itself, as this is an ineffecient use of the machine's 
                 resouces hence, I am starting the count variable at 1

        FOR((integer)ii := 1 TO MAX_CAP (exclusive) CHANGEBY 1) THEN 
                (Real) compareSub := calcTravelTimeSub <- storeSubs[ii], 
                                                            distance
                IF (compareSub < fastestSubTime) THEN
                    (SubMarine) fastestSub := storeSubs[ii]
                END IF 
        END FOR 
        
        str := fastestSub.toString <- none

SUBMODULE: calcTravelTimeSub
    IMPORT: inShip (Submarine Object), distance (Integer)
    EXPORT: timeHours (Real) 
    PUROSE: is to calculate the travel time of submarine in hours 
    
    ALGORITHM:
       
        (Real) ratio := ((Real)distance / (Real)(inShip.getCylinders <- none))
        (Real) denom := (10.00 + (inShip.getMaxDepth <- none * -1.00))
        (Real) invDenom := 1.00 / denom 
        
        timeHours := ratio * invDenom
        
SUBMODULE: destinationCheckJet
    IMPORT: (Integer) distance
    EXPORTS: (String) str 
    PURPOSE:

    ALGORITHM:
        
        COMMENT: I am setting up a submarine object to set up a reference point
                 of comparison to other jet objects withing the storeJets
                 array. The 0 index sub is the most convient

        (Real) fastestJetTime := calcTravelTimeJet <- (storeJets[0],
                                                                distance)

        COMMENT: I don't want the reference jet of comparison, to comparew
                 by itself, as this is an ineffecient use of the machine's 
                 resouces.

        FOR((integer)ii := 1 TO MAX_CAP (exclusive) CHANGEBY 1) THEN 
                compareJet : calcTraveTimeJet <- storeJets[ii], distance
                IF (compareJet < fastestJetTime) THEN
                    (FighterJet) fastestJet := storeJets[ii]
                END IF 
        END FOR 
        
        str := fastestJet.toString

SUBMODULE: calcTravelTimeJets
    IMPORT:inShip (fighterJet object), (Integer) distance
    EXPORT: timeHours (Real)
    PURPOSE: is to calculate the tracel time of the fighter jet in hours

    ALGORITHM:

        (Real) denom := inShip.getWingSpan <- none * 
                        (Real) inShip.getCylinders <- none * 150.00 
        timeHours := (Real)distance / denom

SUBMODULE: findDuplicateSubs
    IMPORTS: none
    EXPORT: dupilicates[] (SubMarine object)
    ASSERTION:

    ALGORITHM:
        
        COMMENT: The multipilcation by 2 is done because it allows the 
                 duplicates array store the actual ship and it's dupilcate in 
                 the indexes next to each other and the programme only to
                 allowed to have 15 ships at time hence the maximum number of
                 duplicates you can have is 15. Therefore, double the orginal
                 amount is the maxiumum amount you can have. 

        (object) duplicates [] := SIZE of MAX_CAP * 2
        
        FOR ((integer) ii := 0 TO MAX_CAP (exclusive) CHANGEBY 1) THEN

            COMMENT: I am starting the looping variable at one because 1 don't
                     want the programme to store itself as a dupilcate, hence
                     it will search for objects after itself

            FOR((integer) jj := 1 TO MAX_CAP (exclusive) CHANGEBY 1) THEN
                IF (storeSubs[ii].equals(storeSubs[jj])) THEN
                    duplicate[ii] := storeSubs[ii]
                    duplicate[jj] := storeSubs[jj]
                END IF

        END FOR

SUBMODULE: findDuplicateJets
    IMPORTS: none
    EXPORT: dupilicates[] (fighterJetClass object) 
    ASSERTION:

    ALGORITHM:

    (object) duplicates [] := SIZE of MAX_CAP * 2 
        
        FOR ((integer) ii := 0 TO MAX_CAP (exclusive) CHANGEBY 1) THEN

            COMMENT: I am starting the looping variable at one because I don't
                     want the programme to store itself as a dupilcate, hence
                     it will search for objects after itself

            FOR((integer) jj := 1 TO LENGTH of storeJet (exclusive)
                                 CHANGEBY 1) THEN
                IF (storeJets[ii].equals(storeJets[jj])) THEN
                    duplicate[ii] := storeJets[ii]
                    duplicate[jj] := storeJets[jj]
                END IF
            END FOR

PRIVATE SUBMODULES:

SUBMODULE: validateSub
    IMPORT: inObjct (SubMarine object)
    EXPORT: isValid (Boolean)
    ASSERTION: if inObjct is a SubMarine object then it's  valid

    ALGORITHM:

        isValid := FALSE
        IF (inObjct ISA SubMarine object) THEN
            IF (the inObjct doens't equal to null) THEN 
                IF (countSubs < MAX_CAP) THEN
                    isValid := TRUE
                ELSE
                    FAIL ("ERROR: Not enough storage in the submarine storage")
                END IF ELSE
            ELSE
                FAIL ("ERROR: the class fields of the submarine object 
                       are empty") 
            END IF ELSE
        ELSE
            FAIL ("ERROR: not a submarine")
        END IF ELSE

SUBMODULE: validateJet
    IMPORT: inObjct (fighterJet object)
    EXPORT: isValid (Boolean)
    ASSERTION: if inJet is a fighterJet object then it's valid

    ALGORITHM:

        isValid := FALSE
        IF (inObjct ISA FighterJet object) THEN 
            IF(inObjct does not equal to null) THEN
                IF (countJets < MAX_CAP) THEN
                    isValid := TRUE
                ELSE 
                    FAIL ("ERROR: not enough storage") 
                END IF ELSE
            ELSE 
                FAIL ("ERROR: the classfields of the objects are empty")
            END IF ELSE
                FAIL ("ERROR: not a fighterjet object") 
        END IF ELSE
              
OTHER METHODS:

SUBMODULE: clone
    IMPORT: none
    EXPORT: cloneShipStorage (Object)
    ASSERTION: returns a cloned object of the current object

    ALGORITHM:
        CONSTRUCT cloneShipStorage USING ALTERNATE CONSTRUCTOR withS
            -(Integer) countSubs
            -(Integer) countJets
            -(ARRAY OF SubMarine object) storeSubs []
            -(ARRAY OF fighterJet object) storeJets []

SUBODULE: equalsArray
    IMPORT: arrayOne (Object), arrayTwo (object Two)
    EXPORT: isSame (boolean)
    ASSERTION: if two array objects are the same class type and length, and have
               the same objects in the array and it's valid

    ALGORITHM:

        COMMENT: this algorithm was adapted from worksheet 9 of OOPD

        IF (length of arrayOne is EQUAL to length of arrayTwo) THEN
            isValid :=   TRUE

            COMMENT: searching through both arrays to ensure that they have
                     the same contents in the array

            (Integer) compareElements := 0

            DO
                isSame := arrayOne[compareElements].equals
                                                   (arrayTwo[compareElements])
                compareElements := compareElements + 1
            WHILE compareElements < LENGTH of arrayOne
        END IF

SUBMODULE: toStringSubArr
    IMPORT: none
    EXPORT: str [] (address of str in memory of the data type string)
    ASSERTION:

    ALGORITHM:

            str [] := SIZE of MAX_CAP

            FOR ((Integer) ii := 0 TO MAX_CAP (exclusive) CHNAGEBY 1) THEN
                st[ii] := storeSubs[ii].toString
            END FOR

SUBMODULE: toStringJetArr
    IMPORT: none
    EXPORT: str [] (address of str in memory of the data type string)
    ASSERTION:

    ALGORITHM:

        str [] := SIZE of MAX_CAP

       FOR ((Integer) ii = 0 TO MAX_CAP (exclusive) CHANGEBY 1) THEN
            str [ii] := storeSubs[ii].toString
        END FOR

SUBMODULE: toStringArr
    IMPORT: none
    EXPORT: strarr [] (String)
    ASSERTION:

    ALGORITHM:

        COMMENT: I am adding an extra 1 to tolShipsInfo. Because, I want an
                 extra index to store the summary of the ship storage units
                 (i.e. how many ships they're in total. How many jets they're,
                 and how many submarines they're)

        (Integer) tolShipsInfo := MAX_CAP * 2 + 1

        (String) strArr [] := SIZE of tolShipInfo
        
        shipNum := countSubs + countJets

        str [0] := "The hanger contains " +shipNum+ " ships. There's "
                    +countSubs+ " submarines, and there's " +countJets+
                    "fighter jets in the hanger"

        COMMENT: I am starting the looping condition at 1, becasue the 0 index
                 is reserved for the summary of the arrays, and I am subtracting
                 one so the for loop doesn't try to look outside the array as
                 the index of an array starts at 1

        FOR ((Integer)ii:= 1 TO MAX_CAP (exclusive) CHNAGEBY 1
            strarr [ii] :=  storeSubs[ii].toString
        END FOR

        COMMENT: I used the starting index of (MAX_CAP) becasue I want to
                 start adding the information of the fighter jets, to the next
                 vaccant spot after the information of the submarines and it
                 corresponds to MAX_CAP

        FOR((integer) ii:= MAX_CAP TO tolShipsInfo (exclusive) CHANGEBY 1
            strarr [ii] :=  storeJets[ii].toString
        END FOR
