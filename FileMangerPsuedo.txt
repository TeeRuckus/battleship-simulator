COMMENT: How are you checking if the ships have exceeded their repective
         arrays

CLASS: fileManger

STATIC METHODS

SUMBODULE: readFile
    IMPORT: fileName (String)
    EXPORT: none
    PURPOSE: to read and prcess the contents of a file

    ALGORITHM: 
        COMMENT: Psudo code adapted from lecture 5 of OOPD 

        theFile <- OPENFILE fileName
        (Interger) lineNum := 1
        INPUT line FROM theFile

        TRY 
            processLine <- line
            
            COMMENT: I am miultiplying MAXCAP by 2 because there's 2 storage 
                     units of for submarines and jets.

            WHILE (line is not empty and lineNum <= shipStorage.MAXCAP * 2) THEN
                    lineNum <- lineNum + 1 
                    processLine <- line
        
                    INPUT line FROM theFile
            END WHILE 
            
            CLOEFILE theFile

        CATCH: IOException
            OUTPUT: "File not found"
            IF (fileName is not empty) THEN 
                TRY
                    CLOSE theFile
                CATCH IOException
                    OUTPUT: "Not a valid File" 
                END TRY CATCH
        END TRY CATCH 

SUBMODULE: writeFile
    IMPORT: fileName (String)
    EXPORT: none
    PURPOSE: to write the contents in the submarine object to a file

    COMMENT: psudo code adapted from lecture 5 of OOPD


    ALGORITHM
        TRY
            theFile <- OPEN fileName FOR writing
            FOR ((interger)ii := 0 TO ShipStorage.MAX_CAP  CHANGEBY 1) THEN
                OUTPUT TO FILE: ShipStorage.storageUnit[ii].toFileString()
            END FOR 

            FOR ((interger) ii := 0 TO LENGTH ShipStorage.MAX_CAP CHANGEBY 1) THEN
                OUTPUT TO FILE: shipStorage.storageUnit[ii].toFileString()
            END FOR 
            
            CLOSE fileName 
        CATCH IOException
            IF (fileName is not empty) THEN
                TRY
                    CLOSE fileName
                CATCH
                    OUTPUT: "ERROR: unable to writw to file" 
                    COMMENT: there's nothing we can do here now
                END TRY CATCH

SUBMODULE: processLine
    IMPORT: line (String)
    EXPORT: none 
    
    ALGORITHM:
        
        COMMENT: this was adapted from OOPD worksheet 8: REFERENCE THIS LATER
        
        line := READ LINE
        lineContents [] = SIZE of 7 elements 
        lineContents [] := line.split(",") 

        IF (validateLine <- lineContents) THEN
            createShipObjcts <- lineContents
        END IF

SUBMODULE: createShipObjcts 
    IMPORT: lineContents [] (Strings) 
    EXPORT: none
    PURPOSE: to create the ship objects from the file information once it has
             been all validated 

    ALGORITHM:
        
        shipType := first character of fileContents[0] 
        serialNum := validateSerialNum(fileContents[1])
        COMMENT: this is not an integer anymore, it's a string which you're 
                 parsing to a double number
        year := validateYear(fileContents[2] CONVERT to interger)
        cylinders := validateCylinders(fileContents[3] CONVERT to integers)
        fuel = validateFuel(fileContents[4])

        CONSTRUCT engine USING cylinders, fuel (ALTERNATE CONSTRUCTOR)

        CASE (UPPERCASE)shipType
            S:
                hull := subMarineClass.validateHull(line[5]) 
                maxDepth := subMarineClass.validateMaxDepth(line[6])

                CONSTRUCT submarine (object) USING serialNum, year, hull, 
                maxDepth
                
                add the construced object into shipStorage
            F:
                wingSpan := fighterJetClass.validateWingSpan(line[5])
                ordance := fighterJetClass.validateOrdance(line[6])
        
                CONSTRUCT fighterJet (Object) USING serialNum, year, wingSpan,
                ordance

                add the constructed object into shipStorage 

            DEFUALT:
                FAIL "Invalid ship type" (IllegalArgumentException) 

SUBMODULE: searchDir
    IMPORT: none 
    EXPORT: directoryContents []
    ASSERTION:

    ALGORITHM:

    COMMENT: code adapted from:
     https://www.mkyong.com/java/java-how-to-list-all-files-in-a-directory/

SUBMODULE 

PRIVATE  SUBMODULES:

SUBMODULE: validateLine
    IMPORT: lineContents [] (String)
    EXPORT: none 
    ASSERTION: if the line is invalid the programme will fail.

    ALGORITHM: 

    IF (lineContents LENGTH is not 7) THEN
        FAIL (IllegalArgumentException)
    END IF

    IF (lineContents[0] LENGTH is NOT 1) THEN   
        FAIL (IllegalArguementException
    END IF 


