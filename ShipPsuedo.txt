ABSTRACT CLASS: Ship  
    
    CLASS FIELDS:
        String serialNum
        Integer year
        Engine engine

    CONSTRUCTORS:

    DEFUALT Constructor
        IMPORT: none
        EXPORT: none
        ASSERTION: an abstract ship with a serial number of 123.456, commissioned
               in 2000, with an engine object is a valid state

    ALGORITHM:
        
        serialNum := "123.456"
        year := 2000
        engine := new instance of Engine <- none

    ALTERNATE Constructor
        IMPORT: inSerialNum (String), inYear (integer), inEngine (Engine Object)
        EXPORT: none
        ASSERTION: creates an object of an abstract object of ship, otherwise it 
               fails

    ALGORITHM:
        IF (validateSerialNum(inSerialNum)) THEN
            IF (validateYear(inYear)) THEN
                serialNum := inSerialNum
                year := inYear
                eninge := inEngine
            END IF
        END IF

    COPY Constructor 
        IMPORT: inShip (Ship)
        EXPORT: none
        ASSERTION: creates a copy of the current object 

    ALGORITHM:
        serialNum := inShip.getSerialNum <- none
        year := inShip.getYear <- none
        engine = getEngine <- none 

    ACCESSORS

    SUBMODULES: getSerialNum
        IMPORT: none
        EXPORT: serialNum (Real) 
        ASSERTION: returns the last set serial number set

    SUBMODULE: getYear
        IMPORT: none
        EXPORT: year (Interger)
        ASSERTION: returns the last set commision year

    SUBMODULE: getEngine 
        IMPORT: none
        EXPORT: new Engine object
        ASSERTION: returns the last created engine object

    MUTATORS

    SUBMODULE: setSerialNum
        IMPORT: inSerialNum (String)
        EXPORT: none
        ASSERTION: sets the serial number to inSerialNum if it's valid, 
                   otherwise it fails

        ALGORITHM:
            IF (validateSerialNum <- inSerialNum) THEN
                serialNum := inSerialNum
            END IF

    SUBMODULE: setYear
        IMPORT: inYear (interger)
        EXPORT: none
        ASSERTION: set year to inYear if it's valid, otherwise it will fail

        ALGORITHM:
            IF (validateYear <- inYear) THEN
                year := inYear
            END IF 

    SUBMODULE: setEngine
        IMPORT: inEngine (Engine object) 
        EXPORT: engine (Engine ObjectA
        ASSERTION: sets engine to inEngine it it's valid, otherwise fail

        ALGORITHM:

            IF(NOT(inEngine ISA Engine)) THEN
                FAIL
            ELSE
                engine := inEngine
            END IF ELSE
    
    DOING METHODS

    ABSRACT SUBMODULE: calcTravelTime
        IMPORT: distance (integer)
        EXPORT: Real
        PURPOSE: To allow the subclasses of ship to inherit this method

    PRIVATE METHOD


    SUBMODULE: validateSerialNum
        IMPORT: inSerialNum (Real)
        EXPORT: isValid (Boolean)
        ASSERTION: validates serial numbers as true whereby its first three
                   digits are between 100 to 200 (inclusive), and the last three
                   digits are between 001 - 999 (inclusive), otherwise it will
                   validate them as false.

        ALGORITHM:
            (Boolean) isValid := FALSE

            String [] parts = SIZE of 2
            parts = inSerialNum SPLIT every "."

            IF (validateSerialNumLength(inSerialNum)) THEN 
                IF (validateWholePart(parts[0])) THEN
                    IF (validateDecimalPart(parts[1]))
                        
                        isValid = TRUE

                    END IF
                END IF
            END IF

    SUBMODULE: validateSerialNumLength
        IMPORT: serialNum (String)
        EXPORT: isValid (Boolean)
        ASSERTION: validate serialNu, as true if it has a length of 7 "XXX.YYY"

        ALGORITHM:
            (Boolean) isValid = FALSE

            IF (serialNum LENGTH is equal to 7 ) THEN
                isValid = TRUE
            ELSE
                FAIL
            END IF ELSE 
        
    SUBMODULE: validateWholePart
        IMPORT: wholePart (String)
        EXPORT: isValid (Boolean)
        ASSERTION: validates the wholepart of the serial number as true if it's
               between 100 to 300 (inclusive)

        ALGORITHM:

        COMMENT:we need to convert wholePart into an integer so we can check 
                if it's in the valid range og 100 to 300 
        
        (integer) wholePartInt := parse wholePart to integer
        isValid = FALSE

        IF ( 100 >= wholePartInt <= 300 ) THEN 
            isValid := TRUE
        ELSE
            FAIL("Invalid  whole part of the serial number")
        END IF ELSE

    SUBMODULE: validaDecimalPart
        IMPORT: decimalPart (string)
        EXPORT: isValid (Boolean)
        ASSERTION: validates the decimal part of the serial number if it's
                   it's between 001 to 999 (inclusive)

        ALGORITHM:

        COMMENT:we need to convert decimalPart to an integer so we can check if 
                it's in the valid range of 001 to 999. However we don't need to
                check if it has 3 numbers places as another method handles 
                that 

        (integer) decimalPartInt := parse decimalPart to integer 
        isValid := FALSE

        IF (1 >= decimalPartint <= 999) THEN
            isValid = TRUE
        ELSE
            FAIL("Invalid decimal part of serial number")
        END IF ELSE
  
    SUBMODULE: validateYear
        IMPORT: inYear (intergers)
        EXPORT: isValid (Boolean)
        ASSERTION: A commission year between 1950 to 2022 (interger) will be
                   valid, otherwise an error will be thrown to the user

        ALGORITHM:
            isValid := FALSE

            IF ( 1950 <= inYear <= 2022) THEN
                isValid :=   TRUE
            ELSE
                FAIL("Invalid year")
            END IF ELSE


    ABSTRACT SUBMODULE: clone
        IMPORT: none
        EXPORT: an identical object to the current object which has been made
        ASSERTION: returns a cloned object of the current object

    ABSTRACT SUBMODULE: equals
    IMPORT: inObjct (object)
    EXPORT: isSame (boolean)
    ASSERTION: two submarines are interchangable if they have the same hull,
               and max depth


