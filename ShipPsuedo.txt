ABSTRACT CLASS: Ship  
    
    CLASS FIELDS:
        String serialNum
        Integer year
        Engine engine

    CONSTRUCTORS:

    DEFUALT Constructor
        IMPORT: none
        EXPORT: none
        ASSERTION: an abstract ship with a serial number of 123.456, commissioned
               in 2000, with an engine object is a valid state

    ALGORITHM:
        
        serialNum := "123.456"
        year := 2000
        engine := new instance of Engine <- none

    ALTERNATE Constructor
        IMPORT: inSerialNum (String), inYear (integer), inEngine (Engine Object)
        EXPORT: none
        ASSERTION: creates an object of an abstract object of ship, otherwise it 
               fails

    ALGORITHM:
        IF (validateSerialNum(inSerialNum)) THEN
            IF (validateYear(inYear)) THEN
                serialNum := inSerialNum
                year := inYear
                eninge := inEngine
            END IF
        END IF

    COPY Constructor 
        IMPORT: inShip (Ship)
        EXPORT: none
        ASSERTION: creates a copy of the current object 

    ALGORITHM:
        serialNum := inShip.getSerialNum <- none
        year := inShip.getYear <- none
        engine = getEngine <- none 

    ACCESSORS

    SUBMODULES: getSerialNum
        IMPORT: none
        EXPORT: serialNum (Real) 
        ASSERTION: returns the last set serial number set

    SUBMODULE: getYear
        IMPORT: none
        EXPORT: year (Interger)
        ASSERTION: returns the last set commision year

    SUBMODULE: getEngine 
        IMPORT: none
        EXPORT: new Engine object
        ASSERTION: returns the last created engine object

    MUTATORS

    SUBMODULE: setSerialNum
        IMPORT: inSerialNum (String)
        EXPORT: none
        ASSERTION: sets the serial number to inSerialNum if it's valid, 
                   otherwise it fails

        ALGORITHM:
            IF (validateSerialNum <- inSerialNum) THEN
                serialNum := inSerialNum
            END IF

    SUBMODULE: setYear
        IMPORT: inYear (interger)
        EXPORT: none
        ASSERTION: set year to inYear if it's valid, otherwise it will fail

        ALGORITHM:
            IF (validateYear <- inYear) THEN
                year := inYear
            END IF 

    SUBMODULE: setEngine
        IMPORT: inEngine (Engine object) 
        EXPORT: engine (Engine ObjectA
        ASSERTION: sets engine to inEngine it it's valid, otherwise fail

        ALGORITHM:

            IF(NOT(inEngine ISA Engine)) THEN
                FAIL
            ELSE
                engine := inEngine
            END IF ELSE
    
    DOING METHODS

    ABSRACT SUBMODULE: calcTravelTime
        IMPORT: distance (integer)
        EXPORT: Real
        PURPOSE: To allow the subclasses of ship to inherit this method

    PRIVATE METHOD


    SUBMODULE: validateSerialNum
        IMPORT: inSerialNum (Real)
        EXPORT: isValid (Boolean)
        ASSERTION: validates serial numbers as true whereby its first three
                   digits are between 100 to 200 (inclusive), and the last three
                   digits are between 001 - 999 (inclusive), otherwise it will
                   validate them as false.

        ALGORITHM:
            (Boolean) isValid := FALSE

            String [] parts = SIZE of 2
            parts = inSerialNum SPLIT every "."

            inSerialNum := inSerialNum * 1 000
            wholePart := (interger)inSerialNum DIV 1 000
            decimalPart := (interger)inSerialNum MOD 1 000

            IF (validSerialFormat <- inSerialNum, wholePart, decimalPart) THEN
                isValid := TRUE
            END IF

        SUBMODULE: validSerialFormat
            IMPORT: inSerialNum (Real), wholePart (interger), decimalPart (interger)
            EXPORT: isValid (Boolean)
            PURPOSE: to ensure that the serial number is written in this format
                     XXX.YYY and not in any other format.
            ASSERTION: inSerialNum will be true if it's inputed in the following
                       formatting XXX.YYY, otherwise, an error will be thrown to the
                       user

            ALGORITHM:
                isValid := FALSE

                checkDecimalPart := inSerialNum - (Real)(wholePart * 1000)
                IF (AbsouleValueOf(checkDecimalPart - decimalPart) < TOL)
                    IF (100 <= wholePart <= 300) THEN
                        IF (1 <= decimalPart <= 999) THEN
                            isValid := TRUE
                END IF

SUBMODULE: validateYear
            IMPORT: inYear (intergers)
            EXPORT: isValid (Boolean)
            ASSERTION: A commission year between 1950 to 2022 (interger) will be
                       valid, otherwise an error will be thrown to the user

            ALGORITHM:
                isValid := FALSE

                IF ( 1950 <= inYear <= 2022) THEN
                    isValid :=   TRUE
                END IF



