CLASS: Engine

    PUBLIC CLASS CONSTANTS:
        BATRY (String) := "BATTERY"
        DSL (String) := "DIESEL" 
        BIO (String) := "BIO" 
        MAXCYLINDERS (integer) := 20
        MINCYLINDERS (integer) := 2

    CLASS FIELDS:
        cyliners (Integer)
        fuel (String)

    COSTRUCTORS:

    Defualt:
        IMPORT: none
        EXPORT: none
        ASSERTION: an engine is valid with a fuel of diesel and 6 cylinders

        ALGORITHM:
            cylinders : = 6            
            fuel := DSL

    Alternate
        IMPORT: inFuel (String), inCylinders (Interger) 
        EXPORT: none
        ASSERTIONS: creates an object if the imports are valid, otherwise it 
                    will FAIL

        ALGORITHM:
            IF (validateCylinders <- inCylinders) THEN
                IF (validateFuel <- inFuel) THEN
                    
                    cylinders := inCylinders
                    fuel := inFuel <- make a copy

                END IF
            END IF

    Copy:
        IMPORT: inEngine (Engine)
        EXPORT: none
        ASSERTION: creates an object which is identical to the imported object

        ALGORITHM:
            cylinders := inEngine.getCylinders <- none
            fuel := inEngine.getFuel <- none

    ACCESSORS

    SUBMODULES: getCylinders
        IMPORT: none
        EXPORT: cylinders (Real) 
        ASSERTION: returns the last set cylinder value

    SUBMODULE: get getFuel
        IMPORT: none
        EXPORT: fuel (String)
        ASSERTION: returns the last set fuel

    MUTATORS:

    SUBMODULE: setCylinders
        IMPORT: inCylinders (Real)
        EXPORT: none
        ASSERTION: sets the cylinders to inCylinders if it's valid, otherwise
                    it fails

        ALGORITHM:
            IF (validateCylinders <- inCylinders) THEN
                cylinders := inCylinders
            END IF

    SUBMODULE: setFuel
        IMPORT: inFuel (String)
        EXPORT: none
        ASSERTION: set fuel to to inFuel if it's valid, otherwise it will fail

        ALGORITHM:
            IF (validateFuel <- inFuel) THEN
                fuel := inFuel
            END IF 

    PRIVATE SUBMODULES:

        SUBMODULE: validateCylinders
            IMPORT: inCylinders (Real)
            EXPORT: isValid (Boolean)
            ASSERTION: validates cylinders which are beteween 2 and 20 
                       (inclusive)

            ALGORITHM:
                isValid := FALSE           
                
                IF (MINCYLNDERS <= inCylinders <= MAXCYLINDERS) THEN
                    isValid := TRUE
                ELSE
                    FAIL("Invalid cylinders")
                END IF ELSE 

        SUBMODULE: validateFuel
            IMPORT: inFuel (String)
            EXPORT: isValid (boolean)
            ASSERTION: it will only validate inFuel if it is a battery, or
                       diesel or bio. 

            ALGORITHM:
               isValid := False

               COMMENT: converting inFuel to be upper case, to allow any casing 
                        for fuel to be passed to this method as specified in 
                        the specification

               (String) upperCaseInFuel := inFuel CONVERT to upper cases

                IF (upperCaseInFuel EQUALS TO BATRY or DSL or BIO) THEN 
                    isValid := TRUE
                ELSE
                    FAIL("Invalid fuel")
                END IF ELSE

    OTHER METHODS:

    SUBMODULE: clone
        IMPORT: none
        EXPORT: cloneEngine (Object)
        ASSERTION: returns a cloned object of the current object

        ALGORITHM:
            construct cloneEngine using this 

    SUBMODULE: equals
        IMPORT: inObjct (object)
        EXPORT: isSame (boolean)
        ASSERTION: two engines are indentical if they have the same fuel and 
                   cylinders

        ALGORITHM:
            isSame := FALSE
            IF (inObj ISA Engine) THEN
                inEngine  := (Convert to Engine)inObjct
                isSame := (fuel EQUALS inEngine.getFuel <- none) AND
                          (cylinders ==  inEngine.getCylinders <- none)
            END IF


    SUBMODULE: toString
        IMPORT: none
        EXPORT: str (String)
        PURPOSE: to return a string of the engines classfields states

        ALGORITHM:

            COMMENT: fuel is formatteded in upper cases and this is not very 
            user friendly, hence it needs to be formetted to lower cases. Thus 
            a creation of a lower case variable

            fuelLowerCase (String) := fuel <- convert to lower case
            str := " The engine has" +cylinders+ " cylinders, and it runs on"
                    +fuelLowerCase+ " fuel".

    SUBMODULE: toFileString
        IMPORT: none
        EXPORT: str (String) 
        PURPSOSE: to return a string of the engines classfields in a file 
                  format

        ALGOTITHM:
            str :=  +cylinders+ ", " +fuel+ "."
